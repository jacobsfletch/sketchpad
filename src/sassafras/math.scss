//////////////////////////////////////////////////

// Math
	// roundUpToAny($n, $x)
	// roundToBaseline($n)
	// pow($number, $exp)
	// strip-unit($number)
	// roundToDivisible($base, $divisible)
	// max-number($checknum, $max)
	// circFromDiameter($diameter)
	// circFromRadius($radius)

//////////////////////////////////////////////////

@function baseline($multiplier: 1) {
	$baseline: $base-line-height;
	@return ($multiplier * $baseline) * 1rem;
}

// roundUpToAny
	// Parameters
		// $n : number
		// $x : number
	// Returns
		// A rounded number to the nearest multiple of another.

@function roundUpToAny($n, $x: $base-line-height) {
	@return round(($n + $x/2) / $x) * $x;
}

// roundToBaseline
	// Parameters
		// $n : number
	// Returns
		// Round a number to the nearest multiple of the baseline.

@function roundToBaseline($n) {
	@return round($n / ($base-line-height/2)) * $base-line-height/2;
}

// pow
	// Parameters
		// $number : number
		// $exp : number
	// Returns
		// The exponential value of a number by its power.

@function pow($number, $exp) {
	$value: 1;
	// Allow 1 $exp to return $number without any multiplication.
	$exp : $exp - 1;
	@if $exp > 0 {
		@for $i from 1 through $exp {
			$value: $value * $number;
		}
	}
	@else if $exp < 0 {
		@for $i from 1 through -$exp {
			$value: $value / $number;
		}
	}
	@return $value;
}

// strip-unit
	// Parameters
		// $number : number
	// Returns
		// Unitless number

@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
  }
  @return $number;
}

// roundToDivisible
	// Parameters
		// $base : number
		// $divisible : number
	// Returns
		// A number rounded to the nearest divisible of another.

@function roundToDivisible($base, $divisible) {
	@return round($base / $divisible) * $divisible;
}

// Max-Number
	// Parameters
		// $checknum : number
		// $max : number
	// Returns
		// A number ...

@function max-number($checknum, $max){
	$checknum : $checknum * 16;
	@if $checknum > $max {
		@return $max * 1px;
	} @else {
		@return ($checknum/16) * 1rem;
	}
}

// circFromDiameter
	// Parameters
		// $diameter : number
	// Returns
		// The circumference of a circle from its diameter.

@function circFromDiameter($diameter) {
	$pi: 3.1415926535897932384626433832795028841971693993751;
	@return ($diameter * $pi);
}

// circFromRadius
	// Parameters
		// $radius : number
	// Returns
		// The circumference of a circle from its radius.

@function circFromRadius($radius) {
	$diameter: $radius * 2;
	@return circFromDiameter($diameter);
}
